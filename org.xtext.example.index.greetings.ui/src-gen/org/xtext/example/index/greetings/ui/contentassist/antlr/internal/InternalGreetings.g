/*
* generated by Xtext
*/
grammar InternalGreetings;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.example.index.greetings.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.index.greetings.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.index.greetings.services.GreetingsGrammarAccess;

}

@parser::members {
 
 	private GreetingsGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(GreetingsGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGreetingsAssignment()); }
(rule__Model__GreetingsAssignment)*
{ after(grammarAccess.getModelAccess().getGreetingsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGreeting
entryRuleGreeting 
:
{ before(grammarAccess.getGreetingRule()); }
	 ruleGreeting
{ after(grammarAccess.getGreetingRule()); } 
	 EOF 
;

// Rule Greeting
ruleGreeting
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGreetingAccess().getAlternatives()); }
(rule__Greeting__Alternatives)
{ after(grammarAccess.getGreetingAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHelloGreeting
entryRuleHelloGreeting 
:
{ before(grammarAccess.getHelloGreetingRule()); }
	 ruleHelloGreeting
{ after(grammarAccess.getHelloGreetingRule()); } 
	 EOF 
;

// Rule HelloGreeting
ruleHelloGreeting
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHelloGreetingAccess().getGroup()); }
(rule__HelloGreeting__Group__0)
{ after(grammarAccess.getHelloGreetingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRefGreeting
entryRuleRefGreeting 
:
{ before(grammarAccess.getRefGreetingRule()); }
	 ruleRefGreeting
{ after(grammarAccess.getRefGreetingRule()); } 
	 EOF 
;

// Rule RefGreeting
ruleRefGreeting
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRefGreetingAccess().getGroup()); }
(rule__RefGreeting__Group__0)
{ after(grammarAccess.getRefGreetingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Greeting__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGreetingAccess().getHelloGreetingParserRuleCall_0()); }
	ruleHelloGreeting
{ after(grammarAccess.getGreetingAccess().getHelloGreetingParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getGreetingAccess().getRefGreetingParserRuleCall_1()); }
	ruleRefGreeting
{ after(grammarAccess.getGreetingAccess().getRefGreetingParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__HelloGreeting__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HelloGreeting__Group__0__Impl
	rule__HelloGreeting__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HelloGreeting__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHelloGreetingAccess().getHelloKeyword_0()); }

	'Hello' 

{ after(grammarAccess.getHelloGreetingAccess().getHelloKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HelloGreeting__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HelloGreeting__Group__1__Impl
	rule__HelloGreeting__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HelloGreeting__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHelloGreetingAccess().getNameAssignment_1()); }
(rule__HelloGreeting__NameAssignment_1)
{ after(grammarAccess.getHelloGreetingAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HelloGreeting__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HelloGreeting__Group__2__Impl
	rule__HelloGreeting__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__HelloGreeting__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHelloGreetingAccess().getGroup_2()); }
(rule__HelloGreeting__Group_2__0)?
{ after(grammarAccess.getHelloGreetingAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HelloGreeting__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HelloGreeting__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HelloGreeting__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHelloGreetingAccess().getExclamationMarkKeyword_3()); }

	'!' 

{ after(grammarAccess.getHelloGreetingAccess().getExclamationMarkKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__HelloGreeting__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HelloGreeting__Group_2__0__Impl
	rule__HelloGreeting__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HelloGreeting__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHelloGreetingAccess().getExtendsKeyword_2_0()); }

	'extends' 

{ after(grammarAccess.getHelloGreetingAccess().getExtendsKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HelloGreeting__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HelloGreeting__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HelloGreeting__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHelloGreetingAccess().getParentAssignment_2_1()); }
(rule__HelloGreeting__ParentAssignment_2_1)
{ after(grammarAccess.getHelloGreetingAccess().getParentAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RefGreeting__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RefGreeting__Group__0__Impl
	rule__RefGreeting__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RefGreeting__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRefGreetingAccess().getRefKeyword_0()); }

	'ref' 

{ after(grammarAccess.getRefGreetingAccess().getRefKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RefGreeting__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RefGreeting__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RefGreeting__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRefGreetingAccess().getGreetingAssignment_1()); }
(rule__RefGreeting__GreetingAssignment_1)
{ after(grammarAccess.getRefGreetingAccess().getGreetingAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__GreetingsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_0()); }
	ruleGreeting{ after(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HelloGreeting__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHelloGreetingAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getHelloGreetingAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HelloGreeting__ParentAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHelloGreetingAccess().getParentHelloGreetingCrossReference_2_1_0()); }
(
{ before(grammarAccess.getHelloGreetingAccess().getParentHelloGreetingIDTerminalRuleCall_2_1_0_1()); }
	RULE_ID{ after(grammarAccess.getHelloGreetingAccess().getParentHelloGreetingIDTerminalRuleCall_2_1_0_1()); }
)
{ after(grammarAccess.getHelloGreetingAccess().getParentHelloGreetingCrossReference_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RefGreeting__GreetingAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRefGreetingAccess().getGreetingHelloGreetingCrossReference_1_0()); }
(
{ before(grammarAccess.getRefGreetingAccess().getGreetingHelloGreetingIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getRefGreetingAccess().getGreetingHelloGreetingIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getRefGreetingAccess().getGreetingHelloGreetingCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


